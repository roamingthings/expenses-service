buildscript {
	ext {
		springBootVersion = '1.5.3.RELEASE'
    }
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'

group = 'de.roamingthings.expenses'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

ext["thymeleaf.version"] = "3.0.6.RELEASE"
ext["thymeleaf-layout-dialect.version"] = "2.2.1"
ext["docker.registry"] = 'localhost:5000'

jar {
    archiveName = 'expenses-mono.jar'
}

repositories {
	mavenCentral()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile("org.springframework.boot:spring-boot-starter-security")

    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-validation')

    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-hateoas')
    compile('org.springframework.boot:spring-boot-starter-jersey')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')

    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.thymeleaf.extras:thymeleaf-extras-java8time:3.0.0.RELEASE')
	compile('org.thymeleaf.extras:thymeleaf-extras-springsecurity4:3.0.0.RELEASE')

    compile('org.webjars:bootstrap:3.3.7')
    compile('org.webjars:font-awesome:4.7.0')
    compile('org.webjars:webjars-locator')

	runtime('com.h2database:h2')
	runtime('org.postgresql:postgresql')

    compile group: 'org.hibernate', name: 'hibernate-envers', version: dependencyManagement.importedProperties['hibernate.version']

	compileOnly('org.projectlombok:lombok')

	testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile("org.springframework.security:spring-security-test")

	runtime('org.springframework.boot:spring-boot-devtools')
}

task buildDocker(type: Docker, dependsOn: build) {
    registry = project.ext['docker.registry']
    push = true
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

test {
    systemProperty("spring.profiles.active", project.properties.get("springTestProfile")?:'test')
    useJUnit {
        excludeCategories 'de.roamingthings.junit.category.IntegrationTest'
    }
}

task integrationTest(type: Test) {
    systemProperty("spring.profiles.active", project.properties.get("springTestProfile")?:'test')
    useJUnit {
        includeCategories 'de.roamingthings.junit.category.IntegrationTest'
    }
}